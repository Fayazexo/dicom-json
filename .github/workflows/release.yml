name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.ref.replace('refs/tags/', ''),
              name: `DICOM-JSON ${context.ref.replace('refs/tags/', '')}`,
              body: `Advanced DICOM to JSON converter ${context.ref.replace('refs/tags/', '')}`,
              draft: false,
              prerelease: false
            });
            return data.id

  build-release:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: dicom-json-linux-x86_64.tar.gz

          - target: x86_64-apple-darwin
            os: macos-latest
            name: dicom-json-macos-x86_64.tar.gz

          - target: aarch64-apple-darwin
            os: macos-latest
            name: dicom-json-macos-aarch64.tar.gz

          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: dicom-json-windows-x86_64.zip

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package (*nix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar -czf ../../../${{ matrix.name }} dicom-json
          cd -

      - name: Package (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../${{ matrix.name }} dicom-json.exe
          cd -

      - name: Upload Release Asset
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              name: '${{ matrix.name }}',
              data: fs.readFileSync('./${{ matrix.name }}')
            });